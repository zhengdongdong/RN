// 1. let ********************************
// let 和 var 类似, 都是声明变量, 只是 js 是解释型语言, 只要后面有声明, 可以直接使用, 而 let 更加严格
// var 声明的变量可以在代码块以外使用, let声明的变量出了代码块或者在声明之前使用时
// var 解释型是语言
console.log(c);
var c = "ss"
// 代码块中 undefined
{
    let a = "zdd";
    var b = "ddz";
}
console.log(b);
console.log(typeof(a) == "undefined");
// for 循环之后 undefined
for (let i = 0; i < 10; i++) {

}
console.log(typeof(i) == "undefined");
// 定义前使用, 直接报错
// console.log(typeof(d) == "undefined");
// let d = "aa";

// 2. const 常量 ********************************
const PI = 3.1415926;

// 对象常量
// 对象的属性可以修改, 但是不能修改对象的引用
const obj = {name:"zdd"};
obj.name = "cc";
// obj = {}; 错误

// 防止修改对象属性
const obj1 = Object.freeze({name:"zdd"});
obj1.name = "dd"; // 这里不报错, 但是属性值并没有被修改
console.log(obj1.name);

// 3.变量的解构赋值 ********************************
// 数组解构赋值, 顺序
let [a1, b1] = ["cc", "dd"];  // 相当于声明变量 a1,b1 并给a1, b1 赋值 
console.log(a1 + "," + b1);

// 默认值, 只有严格等于(===) undefined 时, 默认值才生效, null 时不生效
let [a2, b2="bbb"] = ["aaa"];
// let [a2, b2="bbb"] = ["aaa", undefined];
console.log(a2 + " , " + b2);

// 对象解构赋值, 可乱序但需注明名称, 变量名必须一致才能赋值成功
let {name, age} = {name:"jack", age:20, sex:1};
console.log(name + " , " + age);
// 相当于
// var obj {a:"aa", b:1};
// var a = obj.a;
// var b = obj.b;

// 默认值 产生条件和数组一致
let {name1="ddd", age1=20} = {name1:"eee"};
console.log(name1 + " , " + age1);

// 圆括号 圆括号可防止首字母为{}时, 解析器把代码当做是代码块, 完成解构赋值
({x4} = {x4:1});
console.log(x4);
({} = [true, false]);

// 字符串解构赋值
const [s1, s2, s3, s4, s5] = "hello";

// 函数参数的解构赋值
function add([x,y]){
	return x+y;
}
add([1,2]);


// 示例: 数组赋值
var arr = [1,2,3];
let [x1, x2, x3] = arr;
// 示例:交换值
let x = 1;
let y= 2;
[x, y] = [y, x];
// 示例: 函数返回多个值
function ex(){return [1,2,3];}
let [x5,x6,x7] = ex();


// 4.函数 ********************************
// =>
// 不带参数+ 返回值
let func0 = () => 5;
// 等同 func0 =  function(){ return 5;};
// 带有参数
 let func2 = n => console.log(n);
// 等同 let func = function(n){ console.log(n);}

// 带有参数+返回值
// 只有一行返回值可省略return
let func4 = n => n*2;
// 等同 : let func3 = function(n){return n*2;}

// 带有参数+返回对象
// 直接返回对象需要在对象外面加括号
let func5 = n => ({id:n, age:20});

// 解构参数
let func6 = ({first, last}) => first + " " + last;
console.log(func6({first: "zdd", last: "ddz"}));
let func7 = ([first, last]) => first + " " + last;
console.log(func7(["zdd","ddz"]));


// 5.map遍历 ********************************
[1,2,3,5].map(function(n){

});
// return 翻倍返回新数组
var map1 = [1,2,3,5].map(function(n){
	return n*2;
});
var map2 = [1,2,3,5].map(n => n*2);
console.log(map2);

// 6.sort遍历 ********************************
var sort1 = [1,3,2,5].sort((a,b) => a-b);
console.log(sort1);



