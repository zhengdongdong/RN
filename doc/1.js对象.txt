// 对象的创建
var p = new Object();
p.name = "lk";
p.age = 25;
p.haha = function () {
    console.log(this.name + ":sao kui shuo le haha")
}
p.haha();

// 字面量
var b = {
    name: "lk",
    age: 25,
    haha: function () {
        console.log(this.name + ":hahahahahaha");
    }
}
b.haha();

//构造函数
function Person(name, age) {
    this.name = name;
    this.age = age;
    this.haha = function () {
        console.log("sjsdlkfsdl");
    }
}
// 原型链
Person.prototype.nihao = function () {
    console.log(" ni hao a");
}

var c = new Person("lk", 20);
c.haha();
c.nihao();

// 继承
// 父类型
function SuperType() {
    this.flag = true;
}
SuperType.prototype.getSuperValue = function () {
    return this.flag;
}

// 子类型
function SubType() {
    this.subFlag = false;
}

// 继承
//SubType.prototype = new SuperType();

//var s1 = new SubType();
//console.log(s1.getSuperValue());
//console.log(s1.subFlag);



// 原型继承的缺点 -- 属性共享
// function SuperClass(){
//     this.colors = ["red", "blue", "green"];
// }
//
// function SubClass() {
//
// }
//
// SubClass.prototype = new SuperClass();
//
// var s1 = new SubClass();
// s1.colors.push("white");
// console.log(s1.colors);
// var s2 = new SubClass();
// console.log(s2.colors);


// 解决方法, 组合继承
function SuperClass(name) {
    this.name = name;
    this.colors = ["red", "blue", "green"];
}
SuperClass.prototype.sayHi = function () {
    console.log(this.name + ", 你好");
}

function SubClass(name) {
    // 使用call继承父类的属性(无法继承原型链上的方法/属性)
    SuperClass.call(this, name);
}
// 使用原型继承父类的原型方法/属性
SubClass.prototype = new SuperClass();
// 标明构造方法为自己而不是父类, 在原型继承之后
SubClass.prototype.constructor = SubClass;

var s1 = new SubClass("dd");
s1.colors.push("white");
console.log(s1.colors);
var s2 = new SubClass("cc");
console.log(s2.colors);
s2.sayHi();

console.log(s2.constructor === SuperClass);